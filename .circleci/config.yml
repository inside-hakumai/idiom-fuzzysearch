# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    # specify the version you desire here
    # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
    - image: circleci/python:3.6.1

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
    - checkout
    - setup_remote_docker

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum ".circleci/requirements.txt" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run:
        name: install dependencies
        command: |
          python3 -m venv .venv
          . .venv/bin/activate
          pip install -r .circleci/requirements.txt

    - save_cache:
        paths:
        - ./.venv
        key: v1-dependencies-{{ checksum ".circleci/requirements.txt" }}

    - run:
        name: install postgresql
        command: |
          sudo sed -i '/jessie-backports/d' /etc/apt/sources.list
          sudo sed -i '/jessie-updates/d' /etc/apt/sources.list
          sudo apt update
          sudo apt install postgresql -y
          sudo rm -rf /var/lib/apt/lists/*

    - run:
        name: install/setup heroku CLI tool
        command: |
          curl https://cli-assets.heroku.com/install.sh | sudo sh

    - run:
        name: provide idiom dataset
        command: |
          export DATABASE_URL=$(heroku config:get DATABASE_URL --app $HEROKU_APP_NAME)
          . .venv/bin/activate
          python .circleci/provision.py

    - run:
        name: Deploy to Heroku
        command: |
          heroku container:login
          heroku container:push web --recursive --app $HEROKU_APP_NAME
          heroku container:release web --app $HEROKU_APP_NAME

    # run tests!
    # this example uses Django's built-in test-runner
    # other common Python testing frameworks include pytest and nose
    # https://pytest.org
    # https://nose.readthedocs.io

#    - run:
#        name: run tests
#        command: |
#          . venv/bin/activate
#          python manage.py test
#
#    - store_artifacts:
#        path: test-reports
#        destination: test-reports
